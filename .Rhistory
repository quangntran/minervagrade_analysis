# hc_title(
#   text = 'Average LO score'
# ) %>% hc_subtitle(
#   text = paste0('for ', student_name)
# )
}
######
# student_name <- 'Student_1'
# my_data <- data[data$Student_Name == student_name,]
# my_data <- my_data[!is.na(my_data$LO), ]
# my_data$Student_Name <- factor(my_data$Student_Name)
# my_data <- calculate_LO_avg(my_data)
# my_data <- my_data %>%
#   group_by(LO) %>%
#   arrange(Updated_Date) %>%
#   filter(row_number()==n())
# rere <- highchart() %>%
#   hc_chart(type='column') %>%
#   hc_add_series(
#     data = my_data,
#     hcaes(
#       x = 'LO',
#       y = 'running_avg'
#     ))
#
# my_data %>%
#   hchart('column', hcaes(x='LO', y='running_avg'))
######
whole_class_LO_data <- data.frame()
for (i in 1:num_students) {
student_name = list_of_students[i]
my_data <- data[data$Student_Name == student_name,]
my_data <- my_data[!is.na(my_data$LO), ]
my_data$Student_Name <- factor(my_data$Student_Name)
course_avg <- compute_course_avg(my_data)
my_data <- calculate_LO_avg(my_data, 'LO')
my_data <- my_data %>%
group_by(LO) %>%
arrange(Updated_Date) %>%
filter(row_number()==n())
print(my_data)
if (length(names(whole_class_LO_data)) == 0) {
whole_class_LO_data <- my_data %>% select(LO, running_avg)
}
else {
whole_class_LO_data <- rbind(whole_class_LO_data, my_data %>% select(LO, running_avg))
}
name_string <- paste('scores_data_chart_student', toString(i), sep="")
list_LO_score_student[[name_string]] <- plotting_LO_avg(my_data, student_name, 'LO', 'Average LO score', course_avg)
}
whole_class_LO_data <- ddply(whole_class_LO_data, .(LO), summarise,
avg_data = mean(running_avg),
min_data = min(running_avg),
max_data = max(running_avg))
whole_class_LO_data <- whole_class_LO_data %>% arrange(LO)
whole_class_LO_data$low <- whole_class_LO_data$avg_data - whole_class_LO_data$min_data
whole_class_LO_data$high <- whole_class_LO_data$max_data - whole_class_LO_data$avg_data
whole_class_LO_data$x <- whole_class_LO_data$LO
print(whole_class_LO_data)
# graph
whole_class_LO <- highchart() %>%
hc_chart(type = "bar") %>%
hc_add_series(whole_class_LO_data, "errorbar", hcaes(x = x, low = min_data, high = max_data)) %>%
hc_add_series(whole_class_LO_data, hcaes(x=x, y=avg_data), type="scatter", name="Mean", color="black") %>%
hc_xAxis(type='category') %>%
hc_title(
text = 'Range of LO average of a student'
) %>%
hc_yAxis(max = 5, min=0,
visible=TRUE
) %>%
hc_tooltip(
# headerFormat = "",
# pointFormat=paste('Course average: ', course_avg),
formatter= JS("function () {
if (this.series.name == 'Mean'){
return this.point.LO.concat('<br/><b>Mean</b>: ', parseFloat(this.point.y).toFixed(2), '<br/><b>Range</b>: [', parseFloat(this.point.min_data).toFixed(2), ', ', parseFloat(this.point.max_data).toFixed(2), ']');
}}")
)
saveWidget(whole_class_LO, file="highchart.html", selfcontained = TRUE)
source('source.R')
## importing helpful packages
library(dplyr)
library(plyr)
library(tidyr)
library(highcharter)
library(viridis)
library(stringr)
library(xts)
library(anytime)
library(htmlwidgets)
library(manipulateWidget)
## setting the working directory
setwd("~/Documents/cs166/summer internship/grades_analysis/Grading Tracker test//")
## loading data and basic cleaning up
data <- read.csv("sample_data_for_reporting.csv")
names(data) <- gsub("\\.", "_", names(data))
# renaming  HC and LO tables
names(data)[names(data) == "HC_Name"] <- "LO"
names(data)[names(data) == "Learning_Outcome_Name"] <- "HC"
print(dim(data))
# treat N/A as actual NAs
is.na(data) <- (data == "NA") |(data == "N/A") | (data == "")
# removing incomplete instances with no Score data
data <- data[complete.cases(data$Score),]
print(dim(data))
# resetting the index
rownames(data) <- NULL
# convert to timestamp
# data$Updated_Date <- anytime::anytime(data$Updated_Date)
## generating week numbers
data$Week <- as.factor(round(as.numeric(as.character(data$Class_Code))))
## [RHR] this will need to be automated
data <- transform(data,
Assignment= ifelse(
Assignment_Title=="Elevator simulation",
"assignment_1",
NA)
)
data$CO <- mapvalues(data$LO, c("mcanalysis", "mcmodeling", "interpretresults", "professionalism", "pythonimplementation","caanalysis", "camodeling", "networkanalysis","networkmodeling" ),
c("MonteCarlo","MonteCarlo","Simulations","Simulations","Simulations","Cellular Automata","Cellular Automata","Networks","Networks"))
data$CO <- as.factor(data$CO)
################################################################
########################TO DO###################################
# Add weight column                                            #
## assignments have weight 6, and anything else has weight 1
data <- transform(data,
weight= ifelse(
Assessment_Type=="assignment",
6,
1)
)
# Add weighted score column                                    #
data <- mutate(data,
weighted_score = Score * weight)
################################################################
################################################################
### TEST
data <- data[!is.na(data$LO), ]
split_date_func <- function(df) {
# truncate the Updated Date column so that it contains only the date information
df <- mutate(df, Updated_Date=substring(Updated_Date, 1,10))
df <- mutate(df, Updated_Date=as.POSIXct(Updated_Date, format = "%Y-%m-%d"))
mcmodeling_data <- ddply(df %>% arrange(Updated_Date), .(Updated_Date), summarise,
sum_weighted = sum(weighted_score),
tot_weights = sum(weight))
###### By this point we have a dataframe with:
# * date
# * total weighted scores
# * total weights
# What we want to do is taking the running average up to a certain date
# For date #2, it equals:
# (total weighted scores of date 1 + total weighted scores of date 2)/(total weights of date1 + total weights of date 2)
## Idea: we can create
# * a new column (column_a) that is the cumsum of the vector column total weights
# * a new column (column_b) that is the cumsum of the total weighted scores
# * the quantity of interest would be column_b/column_a
mcmodeling_data$cum_tot_weights <- cumsum(mcmodeling_data$tot_weights)
mcmodeling_data$cum_sum_weighted <- cumsum(mcmodeling_data$sum_weighted)
mcmodeling_data$running_avg <- mcmodeling_data$cum_sum_weighted/mcmodeling_data$cum_tot_weights
return(mcmodeling_data)
}
calculate_LO_avg <- function(my_data, col_name_to_group_by) {
# given a data for a specific Student, get the average LO over time
data_with_avg_LO <- ddply(my_data, c(col_name_to_group_by), split_date_func)
if (col_name_to_group_by != 'CO'){
data_with_avg_LO$CO <- mapvalues(data_with_avg_LO$LO, c("mcanalysis", "mcmodeling", "interpretresults", "professionalism", "pythonimplementation","caanalysis", "camodeling", "networkanalysis","networkmodeling" ),
c("MonteCarlo","MonteCarlo","Simulations","Simulations","Simulations","Cellular Automata","Cellular Automata","Networks","Networks"))
data_with_avg_LO$CO <- as.factor(data_with_avg_LO$CO)
}
return(data_with_avg_LO)
}
plotting_LO_evolution <- function(my_data, student_name) {
display_LOs <- c('networkanalysis', 'networkmodeling')
visible_data <- filter(my_data, LO %in% display_LOs)
invisible_data <- filter(my_data, ! LO %in% display_LOs)
mcmodeling_LO_chart <- highchart() %>%
hc_add_series(
data = visible_data%>%
arrange(Updated_Date),
type = 'line',
hcaes(
x = datetime_to_timestamp(Updated_Date),
y = running_avg,
group = LO
),
visible=TRUE,
point_Width = 10
) %>%
hc_add_series(
data = invisible_data%>%
arrange(Updated_Date),
type = 'line',
hcaes(
x = datetime_to_timestamp(Updated_Date),
y = running_avg,
group = LO
),
visible=FALSE,
point_Width = 20
) %>%
hc_xAxis(title = list(text = "Time"),
type = 'datetime'
) %>%
hc_yAxis( max = 5, min=0,
allowDecimals = FALSE,
visible = TRUE
) %>%
hc_tooltip(
# hc_tooltip: Options for the tooltip that appears when the user hovers over a series or point.
formatter= JS("function () {
return this.point.Updated_Date.substring(0,10).concat('<br/>', '<b>',this.point.LO, '</b>: ', parseFloat(this.point.y).toFixed(2));
// return parseFloat(this.point.y).toFixed(2).concat(this.point.Updated_Date);
}")
) %>%
# hc_tooltip(
#   # hc_tooltip: Options for the tooltip that appears when the user hovers over a series or point.
#   formatter= JS("function () {
#
#                 if (this.series.name == 'Average score'){
#                     return this.point.col_name.concat(': ',parseFloat(this.point.y).toFixed(2));
#                 } else{
#                 return this.series.name.concat(': ',parseFloat(this.point.y).toFixed(2));}}")
# ) %>%
hc_title(
text = 'Evolution of Average LO score'
) %>% hc_subtitle(
text = paste0('for ', student_name)
)
}
list_of_students <- unique(data$Student_Name)
num_students <- length(list_of_students)
list_LO_evolution_student = list()
# list_scores_data_chart_student_CO = list()
for (i in 1:num_students) {
student_name = list_of_students[i]
my_data <- data[data$Student_Name == student_name,]
my_data <- my_data[!is.na(my_data$LO), ]
my_data$Student_Name <- factor(my_data$Student_Name)
my_data <- calculate_LO_avg(my_data, 'LO')
name_string <- paste('scores_data_chart_student', toString(i), sep="")
list_LO_evolution_student[[name_string]] <- plotting_LO_evolution(my_data, student_name)
}
## FOR LO BAR CHART FOR EACH STUDENT
list_of_students <- unique(data$Student_Name)
num_students <- length(list_of_students)
list_LO_score_student = list()
# list_scores_data_chart_student_CO = list()
compute_course_avg <- function(data){
data <- calculate_LO_avg(data, 'CO')
data <- data %>%
group_by(CO) %>%
arrange(Updated_Date) %>%
filter(row_number()==n())
return(mean(data[['running_avg']]))
}
plotting_LO_avg <- function(data, student_name, col_name, plot_title, course_avg=-1, y_col='running_avg', min_y=0, max_y=5){
# display_LOs <- c('networkanalysis', 'networkmodeling')
# visible_data <- filter(my_data, LO %in% display_LOs)
# invisible_data <- filter(my_data, ! LO %in% display_LOs)
# values <- c(1,2,3,4)
# vcolor <- c("orange", "green", "blue", "red")
# xnames <- c("LO 1", "LO 2", "LO 3", "LO 4")
# data$color = c("orange", "green", "blue", "red", "orange", "green", "blue", "red")
data <- data %>%
arrange_at(c('CO',col_name))
# chart <- data %>%
#   hchart('column', hcaes(x='LO', y='running_avg'))
#### another test
# data$color <- 'orange'
# hc <- data %>%
#   hchart('column', hcaes(x=LO, y=running_avg, group=LO)) %>%
#   hc_colors(c("#0073C2FF", "#EFC000FF","#0073C2FF", "#EFC000FF",
#               "#0073C2FF", "#EFC000FF","#0073C2FF", "#EFC000FF"))
#### yet another test
if (y_col=='running_avg'){
data <- data %>%
mutate(color = case_when(0 < running_avg  & running_avg< 2 ~ '#EC3A1E',
2 <= running_avg & running_avg< 3 ~ '#ECAC0D',
3 <= running_avg & running_avg< 4 ~ '#5FB40F',
4 <= running_avg & running_avg< 5 ~ '#227CD6',
5 <= running_avg & running_avg< 6 ~ '#430CCD'
))
}
else {
data$color <- 'grey'
}
# data$color <- '#EC3A1E'
# data$color <- rep(NA, nrow(data))
# print(data[data$running_avg < 6,])
# data[data$running_avg < 6,][, 'color'] <- 'a'
# data[data$running_avg < 6, ][, 'color'] <- 'purple'
# data[data$running_avg < 5, ][, 'color'] <- 'blue'
# data[data$running_avg < 4, ][, 'color'] <- 'green'
# data[data$running_avg < 3, ][, 'color'] <- 'orange'
# data[data$running_avg < 2, ][, 'color'] <- 'red'
data$y <- data[[y_col]]
data$course_avg <- course_avg
data$col_name <- data[[col_name]]
chart <- highchart()
if (course_avg >0){
chart <- chart %>%
hc_add_series(data=data$course_avg, type='line', name='Course average',
marker = list(
lineWidth = 1,
radius=0,
lineColor = "black"
),
color= "black",
zIndex=10)
# hc_plotOptions(
#   line = list(                   # put line here instead of area
#     lineColor = "black",
#     lineWidth = 3,
#     marker = list(
#       lineWidth = 1,
#       radius=0,
#       lineColor = "black"
#     ),
#     zIndex=10
#   )
# )
# hc_legend(enabled=T)
}
chart <- chart %>%
hc_chart(type = 'bar', polar = FALSE) %>%
hc_xAxis(categories = data[[col_name]]) %>%
hc_add_series(data=data,
name='Average score',
showInLegend=FALSE) %>%
# hc_add_series(x3,color='red', dashStyle="DashDot") %>%
# hc_yAxis_multiples(
#   list( max=5, min=0, plotLines=list(list(
#     value=course_avg,
#     color="red",
#     width=2,
#     dashStyle="shortdash",
#     zIndex=5,
#     label = list(text="course avg",
#                  style=list( color = 'black', fontWeight = 'bold' ))
#   )))
# ) %>%
# hc_legend(enabled=T) %>%
hc_tooltip(
# headerFormat = "",
# pointFormat=paste('Course average: ', course_avg),
formatter= JS("function () {
if (this.series.name == 'Average score'){
return this.point.col_name.concat(': ',parseFloat(this.point.y).toFixed(2));
} else{
return this.series.name.concat(': ',parseFloat(this.point.y).toFixed(2));}}")
) %>%
hc_title(
text = plot_title
) %>% hc_subtitle(
text = paste0('for ', student_name)
) %>%
hc_yAxis(max = max_y, min=min_y,
allowDecimals = FALSE,
visible=TRUE
) %>%
hc_legend(enabled=T)
####
#####
######### THIS WORKS #########
# df1 <- data.frame('LO'=c('LO 1'), 'score'=c(2), 'color'=c('orange'))
# df2 <- data.frame('LO'=c('LO 2'), 'score'=c(3), 'color'=c('blue'))
# df3 <- data.frame('LO'=c('LO 3'), 'score'=c(3), 'color'=c('blue'))
# df4 <- data.frame('LO'=c('LO 4'), 'score'=c(3), 'color'=c('blue'))
# df_list <- list(df1, df2, df3, df4)
# chart <- highchart()
# for (i in 1:4) {
#   chart <- chart %>%
#     hc_add_series(
#       data = df_list[[i]],
#       type = 'column',
#       hcaes(
#         x = 'LO',
#         y = 'score'
#         # group = 'LO'
#       )
#     )
# }
# chart <- chart %>%
#   hc_xAxis(title = list(text = "LO"),
#            type = 'category'
#   ) %>%
#   hc_legend(enabled = F) %>%
#   hc_yAxis( max = 5, min=0,
#             allowDecimals = FALSE,
#             visible = TRUE
#   ) %>%
#   hc_colors(c('orange', 'blue', 'red'))
######### END THIS WORKS #########
#
# chart <- highchart() %>%
# hc_add_series(
#   data = data,
#   type = 'column',
#   hcaes(
#     x = 'LO',
#     y = 'running_avg'
#     # group = 'LO'
#   ),
#   name = 'Average score',
#   visible=TRUE
# ) %>%
#   # hc_add_series(
#   #   data = list(
#   #     list( y = values[1], color = vcolor[1]),
#   #     list(y = values[2], color = vcolor[2]),
#   #     list(y = values[3], color = vcolor[3]),
#   #     list( y = values[4], color = vcolor[4])
#   #   ),
#   #   name='Data',
#   #   type='column'
#   # ) %>%
#   hc_xAxis(title = list(text = "LO"),
#            type = 'category'
#   ) %>%
#   hc_legend(enabled = F) %>%
#   hc_yAxis( max = 5, min=0,
#             allowDecimals = FALSE,
#             visible = TRUE
#   ) %>%
#   hc_colors(
#     c('orange', 'blue')
#   )
# hc_tooltip(
#   # hc_tooltip: Options for the tooltip that appears when the user hovers over a series or point.
# ) %>%
# hc_title(
#   text = 'Average LO score'
# ) %>% hc_subtitle(
#   text = paste0('for ', student_name)
# )
}
######
# student_name <- 'Student_1'
# my_data <- data[data$Student_Name == student_name,]
# my_data <- my_data[!is.na(my_data$LO), ]
# my_data$Student_Name <- factor(my_data$Student_Name)
# my_data <- calculate_LO_avg(my_data)
# my_data <- my_data %>%
#   group_by(LO) %>%
#   arrange(Updated_Date) %>%
#   filter(row_number()==n())
# rere <- highchart() %>%
#   hc_chart(type='column') %>%
#   hc_add_series(
#     data = my_data,
#     hcaes(
#       x = 'LO',
#       y = 'running_avg'
#     ))
#
# my_data %>%
#   hchart('column', hcaes(x='LO', y='running_avg'))
######
whole_class_LO_data <- data.frame()
for (i in 1:num_students) {
student_name = list_of_students[i]
my_data <- data[data$Student_Name == student_name,]
my_data <- my_data[!is.na(my_data$LO), ]
my_data$Student_Name <- factor(my_data$Student_Name)
course_avg <- compute_course_avg(my_data)
my_data <- calculate_LO_avg(my_data, 'LO')
my_data <- my_data %>%
group_by(LO) %>%
arrange(Updated_Date) %>%
filter(row_number()==n())
print(my_data)
if (length(names(whole_class_LO_data)) == 0) {
whole_class_LO_data <- my_data %>% select(LO, running_avg)
}
else {
whole_class_LO_data <- rbind(whole_class_LO_data, my_data %>% select(LO, running_avg))
}
name_string <- paste('scores_data_chart_student', toString(i), sep="")
list_LO_score_student[[name_string]] <- plotting_LO_avg(my_data, student_name, 'LO', 'Average LO score', course_avg)
}
whole_class_LO_data <- ddply(whole_class_LO_data, .(LO), summarise,
avg_data = mean(running_avg),
min_data = min(running_avg),
max_data = max(running_avg))
whole_class_LO_data <- whole_class_LO_data %>% arrange(LO)
whole_class_LO_data$low <- whole_class_LO_data$avg_data - whole_class_LO_data$min_data
whole_class_LO_data$high <- whole_class_LO_data$max_data - whole_class_LO_data$avg_data
whole_class_LO_data$x <- whole_class_LO_data$LO
print(whole_class_LO_data)
# graph
whole_class_LO <- highchart() %>%
hc_chart(type = "bar") %>%
hc_add_series(whole_class_LO_data, "errorbar", hcaes(x = x, low = min_data, high = max_data)) %>%
hc_add_series(whole_class_LO_data, hcaes(x=x, y=avg_data), type="scatter", name="Mean", color="black") %>%
hc_xAxis(type='category') %>%
hc_title(
text = 'Range of LO average of a student'
) %>%
hc_yAxis(max = 5, min=0,
visible=TRUE
) %>%
hc_tooltip(
# headerFormat = "",
# pointFormat=paste('Course average: ', course_avg),
formatter= JS("function () {
if (this.series.name == 'Mean'){
return this.point.LO.concat('<br/><b>Mean</b>: ', parseFloat(this.point.y).toFixed(2), '<br/><b>Range</b>: [', parseFloat(this.point.min_data).toFixed(2), ', ', parseFloat(this.point.max_data).toFixed(2), ']');
}}")
)
saveWidget(list_LO_score_student[['scores_data_chart_student1']], file="highchart.html", selfcontained = TRUE)
print(getwd())
