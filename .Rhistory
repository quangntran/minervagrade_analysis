y = df$col2
),
point_Width = 20
) %>%
hc_xAxis(
# visible = TRUE
type = 'category'
# opposite = TRUE
) %>%
hc_yAxis(
allowDecimals = FALSE,
visible = TRUE
) %>%
hc_tooltip(
) %>%
hc_title(
text = 'Distribution'
) %>%
hc_subtitle(
text = paste0('for student ', my_name)
) %>%
hc_legend(enabled = F)
return(scores_data_chart)
}
plotting_data(data, my_name, "cyl", "avg_mpg")
library(dplyr)
library(plyr)
library(tidyr)
library(highcharter)
library(viridis)
my_name = "Raquel"
df <- mtcars
data <- ddply(df, .(cyl), summarise, avg_mpg = mean(mpg))
### this plot works fine
scores_data_chart <- highchart() %>%
hc_add_series(
data = data%>%
arrange(cyl),
type = 'column',
hcaes(
x = data$cyl,
y = data$avg_mpg
),
point_Width = 20
) %>%
hc_xAxis(
# visible = TRUE
type = 'category'
# opposite = TRUE
) %>%
hc_yAxis(
allowDecimals = FALSE,
visible = TRUE
) %>%
hc_tooltip(
) %>%
hc_title(
text = 'Distribution'
) %>%
hc_subtitle(
text = paste0('for student ', my_name)
) %>%
hc_legend(enabled = F)
scores_data_chart
## if I want to make multiple plots, it's convenient to make a UDF
plotting_data <- function(df, my_name,
col1, col2) {
df$col1 <- df[[col1]]
df$col2 <- df[[col2]]
print(df$col1)
print(df$col2)
highchart() %>%
hc_add_series(
data = df%>%
arrange(col1),
type = 'column',
hcaes(
x = df$col1,
y = df$col2
),
point_Width = 20
) %>%
hc_xAxis(
# visible = TRUE
type = 'category'
# opposite = TRUE
) %>%
hc_yAxis(
allowDecimals = FALSE,
visible = TRUE
) %>%
hc_tooltip(
) %>%
hc_title(
text = 'Distribution'
) %>%
hc_subtitle(
text = paste0('for student ', my_name)
) %>%
hc_legend(enabled = F)
return(scores_data_chart)
}
### this returns the error "Error in order(col1) : object 'col1' not found"
plotting_data(data, my_name, "cyl", "avg_mpg")
## importing helpful packages
library(dplyr)
library(plyr)
library(tidyr)
library(highcharter)
library(viridis)
library(stringr)
## setting the working directory
setwd("~/Desktop/Grading Tracker CS166 S2020/")
## importing helpful packages
library(dplyr)
library(plyr)
library(tidyr)
library(highcharter)
library(viridis)
library(stringr)
## setting the working directory
setwd("~/Desktop/Grading Tracker test//")
data <- read.csv("sample_data_for_reporting.csv")
names(data) <- gsub("\\.", "_", names(data))
# renaming  HC and LO tables
names(data)[names(data) == "HC_Name"] <- "LO"
names(data)[names(data) == "Learning_Outcome_Name"] <- "HC"
print(dim(data))
# treat N/A as actual NAs
is.na(data) <- (data == "NA") |(data == "N/A") | (data == "")
# removing incomplete instances with no Score data
data <- data[complete.cases(data$Score),]
print(dim(data))
# resetting the index
rownames(data) <- NULL
data$Week <- as.factor(round(as.numeric(as.character(data$Class_Code))))
data <- transform(data,
Assignment= ifelse(
Assignment_Title=="Elevator simulation",
"assignment_1",
NA)
)
## quantitative - by week
all_scores_data <- data[complete.cases(data$Week),]
all_scores_data <- ddply(data %>% arrange(Week), .(Week), summarise,
avg_os = mean(Score),
median_os = median(Score))
n_weeks <- length(unique(all_scores_data$Week))
scores_data_chart <- highchart() %>%
hc_add_series(
data = all_scores_data%>%
arrange(Week),
type = 'line',
hcaes(
x = Week,
y = avg_os
),
name = "Average score",
# color = viridis_pal(alpha = 0.5)(8)[1:n_weeks],
point_Width = 20
) %>%
hc_xAxis(title = list(text = "Week"),
allowDecimals = FALSE,
# visible = TRUE
type = 'line'
# opposite = TRUE
) %>%
hc_yAxis(max = 4, min=2,
allowDecimals = FALSE,
visible = TRUE
) %>%
hc_tooltip(
) %>%
hc_title(
text = 'Distribution of Average Outcome Scores'
) %>%
hc_subtitle(
text = 'in the entire section by week'
) %>%
hc_legend(enabled = F)
dim(data)
list_of_students <- unique(data$Student_Name)
data$Course_Objective <-
ifelse((data$LO == "mcanalysis") | (data$LO == "mcmodeling"), "MonteCarlo",
ifelse((data$LO == "interpretresults") | (data$LO == "professionalism") | (data$LO == "pythonimplementation"), "Simulations",
ifelse((data$LO == "caanalysis") | (data$LO == "camodeling"),  "Cellular Automata",
ifelse((data$LO == "networkanalysis") | (data$LO == "networkmodeling"),  "Networks", NA))))
data$Course_Objective <- as.factor(data$Course_Objective)
plotting_scores <- function(df, student_name,number_of_LOs,
col1, col2, type_of_graph, title_of_graph) {
df$col1 <- df[[col1]]
df$col2 <- df[[col2]]
print(str(df))
print(number_of_LOs)
highchart() %>%
hc_add_series(
data = df %>%
arrange(col1),
type = type_of_graph,
hcaes(
x = col1,
y = col2
),
name = "Average score",
#color = viridis_pal(alpha = 0.5)(8)[1:number_of_LOs],
point_Width = 20
) %>%
hc_xAxis(
# visible = TRUE
type = 'category'
# opposite = TRUE
) %>%
hc_yAxis(max=5, min=2,
allowDecimals = FALSE,
visible = TRUE
) %>%
hc_tooltip(
) %>%
hc_title(
text = title_of_graph
) %>%
hc_subtitle(
text = paste0('for ', student_name)
) %>%
hc_legend(enabled = F)
#return(scores_data_chart)
}
##############Ahmed
student_name = list_of_students[1]
my_data <- data[data$Student_Name == student_name,]
my_data <- my_data[!is.na(my_data$LO), ]
my_data$Student_Name <- factor(my_data$Student_Name)
dim(my_data)
n_LOs <- length(unique(my_data$LO))
n_COs <- length(unique(my_data$Course_Objective))
my_data_LO <- ddply(my_data %>% arrange(Score), .(LO), summarise,
average_grade = mean(Score))
my_data_CO <- ddply(my_data %>% arrange(Score), .(Course_Objective), summarise,
average_grade = mean(Score))
my_data_LO <- ddply(my_data %>% arrange(Score), .(LO), summarise,
average_grade = mean(Score))
## author: Raquel Ribeiro, ribeiro@minervaproject.com
## questions we want to address in this report:
## Q1: evolution of grades by week for each student
## Q2: grades by LO/HC for each student
## importing helpful packages
library(dplyr)
library(plyr)
library(tidyr)
library(highcharter)
library(viridis)
library(stringr)
## setting the working directory
setwd("~/Desktop/Grading Tracker test//")
## loading data and basic cleaning up
data <- read.csv("sample_data_for_reporting.csv")
names(data) <- gsub("\\.", "_", names(data))
# renaming  HC and LO tables
names(data)[names(data) == "HC_Name"] <- "LO"
names(data)[names(data) == "Learning_Outcome_Name"] <- "HC"
print(dim(data))
# treat N/A as actual NAs
is.na(data) <- (data == "NA") |(data == "N/A") | (data == "")
# removing incomplete instances with no Score data
data <- data[complete.cases(data$Score),]
print(dim(data))
# resetting the index
rownames(data) <- NULL
## generating week numbers
data$Week <- as.factor(round(as.numeric(as.character(data$Class_Code))))
## [RHR] this will need to be automated
data <- transform(data,
Assignment= ifelse(
Assignment_Title=="Elevator simulation",
"assignment_1",
NA)
)
## quantitative - by week
all_scores_data <- data[complete.cases(data$Week),]
all_scores_data <- ddply(data %>% arrange(Week), .(Week), summarise,
avg_os = mean(Score),
median_os = median(Score))
n_weeks <- length(unique(all_scores_data$Week))
scores_data_chart <- highchart() %>%
hc_add_series(
data = all_scores_data%>%
arrange(Week),
type = 'line',
hcaes(
x = Week,
y = avg_os
),
name = "Average score",
# color = viridis_pal(alpha = 0.5)(8)[1:n_weeks],
point_Width = 20
) %>%
hc_xAxis(title = list(text = "Week"),
allowDecimals = FALSE,
# visible = TRUE
type = 'line'
# opposite = TRUE
) %>%
hc_yAxis(max = 4, min=2,
allowDecimals = FALSE,
visible = TRUE
) %>%
hc_tooltip(
) %>%
hc_title(
text = 'Distribution of Average Outcome Scores'
) %>%
hc_subtitle(
text = 'in the entire section by week'
) %>%
hc_legend(enabled = F)
dim(data)
####################### zooming in for each student and for each LO
list_of_students <- unique(data$Student_Name)
## [RHR] this will need to be automated
## creating a course objective
data$Course_Objective <-
ifelse((data$LO == "mcanalysis") | (data$LO == "mcmodeling"), "MonteCarlo",
ifelse((data$LO == "interpretresults") | (data$LO == "professionalism") | (data$LO == "pythonimplementation"), "Simulations",
ifelse((data$LO == "caanalysis") | (data$LO == "camodeling"),  "Cellular Automata",
ifelse((data$LO == "networkanalysis") | (data$LO == "networkmodeling"),  "Networks", NA))))
data$Course_Objective <- as.factor(data$Course_Objective)
###################################################################################
############################ generic plotting function ############################
###################################################################################
plotting_scores <- function(df, student_name,number_of_LOs,
col1, col2, type_of_graph, title_of_graph) {
df$col1 <- df[[col1]]
df$col2 <- df[[col2]]
print(str(df))
print(number_of_LOs)
highchart() %>%
hc_add_series(
data = df %>%
arrange(col1),
type = type_of_graph,
hcaes(
x = col1,
y = col2
),
name = "Average score",
#color = viridis_pal(alpha = 0.5)(8)[1:number_of_LOs],
point_Width = 20
) %>%
hc_xAxis(
# visible = TRUE
type = 'category'
# opposite = TRUE
) %>%
hc_yAxis(max=5, min=2,
allowDecimals = FALSE,
visible = TRUE
) %>%
hc_tooltip(
) %>%
hc_title(
text = title_of_graph
) %>%
hc_subtitle(
text = paste0('for ', student_name)
) %>%
hc_legend(enabled = F)
#return(scores_data_chart)
}
##############student1
student_name = list_of_students[1]
my_data <- data[data$Student_Name == student_name,]
my_data <- my_data[!is.na(my_data$LO), ]
my_data$Student_Name <- factor(my_data$Student_Name)
dim(my_data)
n_LOs <- length(unique(my_data$LO))
n_COs <- length(unique(my_data$Course_Objective))
my_data_LO <- ddply(my_data %>% arrange(Score), .(LO), summarise,
average_grade = mean(Score))
my_data_CO <- ddply(my_data %>% arrange(Score), .(Course_Objective), summarise,
average_grade = mean(Score))
scores_data_chart_student1 <- plotting_scores(my_data_LO, student_name, n_LOs, "LO", "average_grade", 'line', "Distribution of LO Scores")
scores_data_chart_student1_CO <- plotting_scores(my_data_CO, student_name, n_COs, "Course_Objective", "average_grade", 'line', "Distribution of CO Scores")
##############student2
student_name = list_of_students[2]
my_data <- data[data$Student_Name == student_name,]
my_data <- my_data[!is.na(my_data$LO), ]
my_data$Student_Name <- factor(my_data$Student_Name)
dim(my_data)
n_LOs <- length(unique(my_data$LO))
my_data_LO <- ddply(my_data %>% arrange(Score), .(LO), summarise,
average_grade = mean(Score))
my_data_CO <- ddply(my_data %>% arrange(Score), .(Course_Objective), summarise,
average_grade = mean(Score))
scores_data_chart_student2 <- plotting_scores(my_data_LO, student_name, n_LOs, "LO", "average_grade", 'line', "Distribution of LO Scores")
scores_data_chart_student2_CO <- plotting_scores(my_data_CO, student_name, n_COs, "Course_Objective", "average_grade", 'line', "Distribution of CO Scores")
##############student3
student_name = list_of_students[3]
my_data <- data[data$Student_Name == student_name,]
my_data <- my_data[!is.na(my_data$LO), ]
my_data$Student_Name <- factor(my_data$Student_Name)
dim(my_data)
n_LOs <- length(unique(my_data$LO))
my_data_LO <- ddply(my_data %>% arrange(Score), .(LO), summarise,
average_grade = mean(Score))
my_data_CO <- ddply(my_data %>% arrange(Score), .(Course_Objective), summarise,
average_grade = mean(Score))
scores_data_chart_student3 <- plotting_scores(my_data_LO, student_name, n_LOs, "LO", "average_grade", 'line', "Distribution of LO Scores")
scores_data_chart_student3_CO <- plotting_scores(my_data_CO, student_name, n_COs, "Course_Objective", "average_grade", 'line', "Distribution of CO Scores")
##############student4
student_name = list_of_students[4]
my_data <- data[data$Student_Name == student_name,]
my_data <- my_data[!is.na(my_data$LO), ]
my_data$Student_Name <- factor(my_data$Student_Name)
dim(my_data)
n_LOs <- length(unique(my_data$LO))
my_data_LO <- ddply(my_data %>% arrange(Score), .(LO), summarise,
average_grade = mean(Score))
my_data_CO <- ddply(my_data %>% arrange(Score), .(Course_Objective), summarise,
average_grade = mean(Score))
scores_data_chart_student4 <- plotting_scores(my_data_LO, student_name, n_LOs, "LO", "average_grade", 'line', "Distribution of LO Scores")
scores_data_chart_student4_CO <- plotting_scores(my_data_CO, student_name, n_COs, "Course_Objective", "average_grade", 'line', "Distribution of CO Scores")
##############student5
student_name = list_of_students[5]
my_data <- data[data$Student_Name == student_name,]
my_data <- my_data[!is.na(my_data$LO), ]
my_data$Student_Name <- factor(my_data$Student_Name)
dim(my_data)
n_LOs <- length(unique(my_data$LO))
my_data_LO <- ddply(my_data %>% arrange(Score), .(LO), summarise,
average_grade = mean(Score))
my_data_CO <- ddply(my_data %>% arrange(Score), .(Course_Objective), summarise,
average_grade = mean(Score))
scores_data_chart_student5 <- plotting_scores(my_data_LO, student_name, n_LOs, "LO", "average_grade", 'line', "Distribution of LO Scores")
scores_data_chart_student5_CO <- plotting_scores(my_data_CO, student_name, n_COs, "Course_Objective", "average_grade", 'line', "Distribution of CO Scores")
##############student6
student_name = list_of_students[6]
my_data <- data[data$Student_Name == student_name,]
my_data <- my_data[!is.na(my_data$LO), ]
my_data$Student_Name <- factor(my_data$Student_Name)
dim(my_data)
n_LOs <- length(unique(my_data$LO))
my_data_LO <- ddply(my_data %>% arrange(Score), .(LO), summarise,
average_grade = mean(Score))
my_data_CO <- ddply(my_data %>% arrange(Score), .(Course_Objective), summarise,
average_grade = mean(Score))
scores_data_chart_student6 <- plotting_scores(my_data_LO, student_name, n_LOs, "LO", "average_grade", 'line', "Distribution of LO Scores")
scores_data_chart_student6_CO <- plotting_scores(my_data_CO, student_name, n_COs, "Course_Objective", "average_grade", 'line', "Distribution of CO Scores")
##############student7
student_name = list_of_students[7]
my_data <- data[data$Student_Name == student_name,]
my_data <- my_data[!is.na(my_data$LO), ]
my_data$Student_Name <- factor(my_data$Student_Name)
dim(my_data)
n_LOs <- length(unique(my_data$LO))
my_data_LO <- ddply(my_data %>% arrange(Score), .(LO), summarise,
average_grade = mean(Score))
my_data_CO <- ddply(my_data %>% arrange(Score), .(Course_Objective), summarise,
average_grade = mean(Score))
scores_data_chart_student7 <- plotting_scores(my_data_LO, student_name, n_LOs, "LO", "average_grade", 'line', "Distribution of LO Scores")
scores_data_chart_student7_CO <- plotting_scores(my_data_CO, student_name, n_COs, "Course_Objective", "average_grade", 'line', "Distribution of CO Scores")
##############student8
student_name = list_of_students[8]
my_data <- data[data$Student_Name == student_name,]
my_data <- my_data[!is.na(my_data$LO), ]
my_data$Student_Name <- factor(my_data$Student_Name)
dim(my_data)
n_LOs <- length(unique(my_data$LO))
my_data_LO <- ddply(my_data %>% arrange(Score), .(LO), summarise,
average_grade = mean(Score))
my_data_CO <- ddply(my_data %>% arrange(Score), .(Course_Objective), summarise,
average_grade = mean(Score))
scores_data_chart_student8 <- plotting_scores(my_data_LO, student_name, n_LOs, "LO", "average_grade", 'line', "Distribution of LO Scores")
scores_data_chart_student8_CO <- plotting_scores(my_data_CO, student_name, n_COs, "Course_Objective", "average_grade", 'line', "Distribution of CO Scores")
##############student9
student_name = list_of_students[9]
my_data <- data[data$Student_Name == student_name,]
my_data <- my_data[!is.na(my_data$LO), ]
my_data$Student_Name <- factor(my_data$Student_Name)
dim(my_data)
n_LOs <- length(unique(my_data$LO))
my_data_LO <- ddply(my_data %>% arrange(Score), .(LO), summarise,
average_grade = mean(Score))
my_data_CO <- ddply(my_data %>% arrange(Score), .(Course_Objective), summarise,
average_grade = mean(Score))
scores_data_chart_student9 <- plotting_scores(my_data_LO, student_name, n_LOs, "LO", "average_grade", 'line', "Distribution of LO Scores")
scores_data_chart_student9_CO <- plotting_scores(my_data_CO, student_name, n_COs, "Course_Objective", "average_grade", 'line', "Distribution of CO Scores")
##############student10
student_name = list_of_students[10]
my_data <- data[data$Student_Name == student_name,]
my_data <- my_data[!is.na(my_data$LO), ]
my_data$Student_Name <- factor(my_data$Student_Name)
dim(my_data)
n_LOs <- length(unique(my_data$LO))
my_data_LO <- ddply(my_data %>% arrange(Score), .(LO), summarise,
average_grade = mean(Score))
my_data_CO <- ddply(my_data %>% arrange(Score), .(Course_Objective), summarise,
average_grade = mean(Score))
scores_data_chart_student10 <- plotting_scores(my_data_LO, student_name, n_LOs, "LO", "average_grade", 'line', "Distribution of LO Scores")
scores_data_chart_student10_CO <- plotting_scores(my_data_CO, student_name, n_COs, "Course_Objective", "average_grade", 'line', "Distribution of CO Scores")
##############student11
student_name = list_of_students[11]
my_data <- data[data$Student_Name == student_name,]
my_data <- my_data[!is.na(my_data$LO), ]
my_data$Student_Name <- factor(my_data$Student_Name)
dim(my_data)
n_LOs <- length(unique(my_data$LO))
my_data_LO <- ddply(my_data %>% arrange(Score), .(LO), summarise,
average_grade = mean(Score))
my_data_CO <- ddply(my_data %>% arrange(Score), .(Course_Objective), summarise,
average_grade = mean(Score))
scores_data_chart_student11 <- plotting_scores(my_data_LO, student_name, n_LOs, "LO", "average_grade", 'line', "Distribution of LO Scores")
scores_data_chart_student11_CO <- plotting_scores(my_data_CO, student_name, n_COs, "Course_Objective", "average_grade", 'line', "Distribution of CO Scores")
